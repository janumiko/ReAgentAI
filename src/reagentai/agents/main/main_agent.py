from dataclasses import dataclass
import logging

from pydantic_ai import Agent, Tool

from src.reagentai.agents.retrosynth_agent.retrosynth_agent import (
    RetrosynthAgent,
    create_retrosynth_agent,
    delegate_to_retroagent,
)
from src.reagentai.models.llm_output import MultipleOutputs
from src.reagentai.tools.image import route_to_image, smiles_to_image

logger = logging.getLogger(__name__)

MAIN_AGENT_INSTRUCTIONS_PATH: str = "src/reagentai/agents/main/instructions.txt"
MAIN_AGENT_MODEL: str = "google-gla:gemini-2.0-flash"


@dataclass
class MainAgentDependencyTypes:
    """
    Defines the dependencies required by the main agent.
    """

    retrosynth_agent: RetrosynthAgent


class MainAgent:
    def __init__(
        self,
        model_name: str,
        instructions: str,
        tools: list[Tool],
        dependency_types: type[MainAgentDependencyTypes],
        dependencies: MainAgentDependencyTypes,
        output_type: type[MultipleOutputs],
    ):
        """
        Initializes the MainAgent with the specified model, instructions, tools, and dependencies.

        Args:
            model_name (str): The name of the language model to use.
            instructions (str): Instructions for the agent.
            tools (list[Tool]): List of tools that the agent can use.
            dependency_types (type[MainAgentDependencyTypes]): The type of dependencies required by the agent.
            dependencies (MainAgentDependencyTypes): The actual dependencies to be used by the agent.
            output_type (type[MultipleOutputs]): The type of output expected from the agent.
        """

        self.model_name = model_name
        self.instructions = instructions
        self.tools = tools
        self.dependency_types = dependency_types
        self.dependencies = dependencies
        self.output_type = output_type

        self.result_history = None

        self._agent = self._create_agent()
        logger.info(f"MainAgent initialized with model: {model_name}")

    def _create_agent(self) -> Agent[MainAgentDependencyTypes, MultipleOutputs]:
        """
        Creates an Agent instance with the specified model and instructions.

        This method uses the self attributes to configure the Agent.

        Returns:
            Agent[MainAgentDependencyTypes, MultipleOutputs]: An instance of the Agent configured with the main agent's model and instructions.
        """

        return Agent(
            self.model_name,
            tools=self.tools,
            instructions=self.instructions,
            deps_type=self.dependency_types,
            output_type=self.output_type,
        )

    def set_model(self, model_name: str):
        """
        Sets the model for the Agent.
        Args:
            model_name (str): The name of the new language model to use.
        """

        self.model_name = model_name
        self._agent = self._create_agent()
        logger.info(f"MainAgent model set to: {model_name}")

    def get_token_usage(self) -> int:
        """
        Returns the token usage of the current agent.

        Returns:
            int: The number of tokens used.
        """
        if self.result_history is not None:
            return self.result_history.usage().total_tokens
        else:
            return 0

    def clear_history(self):
        """
        Clears the chat history of the agent.
        """

        logger.info("MainAgent chat history cleared.")
        self.result_history = None

    def respond(self, user_query: str) -> list[dict]:
        """
        Responds to a user query and updates the chat history asynchronously.

        Args:
            user_query (str): The user's query.
            chat_history (List[tuple]): The current chat history.

        Returns:
            list[dict]: A list of messages generated by the agent in response to the user query.
        """

        if self.result_history is not None:
            message_history = self.result_history.all_messages()
        else:
            message_history = None

        result = self._agent.run_sync(
            user_query,
            message_history=message_history,
            deps=self.dependencies,
        )
        self.result_history = result
        logger.info(f"MainAgent response: {result.output}")
        bot_message = result.output.to_message()
        return bot_message


def create_main_agent() -> MainAgent:
    """
    Creates and returns the main agent client with the specified model and instructions.

    Returns:
        MainAgent: An instance of MainAgent configured with the main agent's model and instructions.
    """

    # Load instructions
    with open(MAIN_AGENT_INSTRUCTIONS_PATH) as instructions_file:
        instructions = instructions_file.read()

    tools = [
        Tool(delegate_to_retroagent, takes_ctx=True),
        Tool(smiles_to_image),
        Tool(route_to_image),
    ]

    retrosynth_agent = create_retrosynth_agent()

    # Initialize the MainAgent client
    main_agent = MainAgent(
        model_name=MAIN_AGENT_MODEL,
        tools=tools,
        instructions=instructions,
        dependency_types=MainAgentDependencyTypes,
        dependencies=MainAgentDependencyTypes(retrosynth_agent=retrosynth_agent),
        output_type=MultipleOutputs,
    )

    return main_agent
